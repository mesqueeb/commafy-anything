import { test, expect } from 'vitest'
import { commafy } from '../src/index'

test('defaults', () => {
  expect(commafy(1)).toEqual('1')
  expect(commafy(10)).toEqual('10')
  expect(commafy(100)).toEqual('100')
  expect(commafy(1000)).toEqual('1,000')
  expect(commafy(10000)).toEqual('10,000')
  expect(commafy(100000)).toEqual('100,000')
  expect(commafy(1000000)).toEqual('1,000,000')
  expect(commafy(10000000)).toEqual('10,000,000')
  expect(commafy(100000000)).toEqual('100,000,000')
  expect(commafy(1000000000)).toEqual('1,000,000,000')
  expect(commafy(10000000000)).toEqual('10,000,000,000')
  expect(commafy(100000000000)).toEqual('100,000,000,000')
  expect(commafy(1000000000000)).toEqual('1,000,000,000,000')
})

test('K', () => {
  expect(commafy(1, {K: true})).toEqual('1')
  expect(commafy(14, {K: true})).toEqual('14')
  expect(commafy(134, {K: true})).toEqual('134')
  expect(commafy(1234, {K: true})).toEqual('1K')
  expect(commafy(10234, {K: true})).toEqual('10K')
  expect(commafy(100234, {K: true})).toEqual('100K')
  expect(commafy(1000234, {K: true})).toEqual('1,000K')
  expect(commafy(10000234, {K: true})).toEqual('10,000K')
  expect(commafy(100000234, {K: true})).toEqual('100,000K')
  expect(commafy(1000000234, {K: true})).toEqual('1,000,000K')
  expect(commafy(10000000234, {K: true})).toEqual('10,000,000K')
  expect(commafy(100000000234, {K: true})).toEqual('100,000,000K')
  expect(commafy(1000000000234, {K: true})).toEqual('1,000,000,000K')
  expect(commafy(1987, {K: true})).toEqual('2K')
  expect(commafy(10987, {K: true})).toEqual('11K')
  expect(commafy(100987, {K: true})).toEqual('101K')
  expect(commafy(1000987, {K: true})).toEqual('1,001K')
  expect(commafy(10000987, {K: true})).toEqual('10,001K')
  expect(commafy(100000987, {K: true})).toEqual('100,001K')
  expect(commafy(1000000987, {K: true})).toEqual('1,000,001K')
  expect(commafy(10000000987, {K: true})).toEqual('10,000,001K')
  expect(commafy(100000000987, {K: true})).toEqual('100,000,001K')
  expect(commafy(1000000000987, {K: true})).toEqual('1,000,000,001K')
  expect(commafy(1999, {K: true})).toEqual('2K')
  expect(commafy(19999, {K: true})).toEqual('20K')
  expect(commafy(199999, {K: true})).toEqual('200K')
  expect(commafy(1999999, {K: true})).toEqual('2,000K')
  expect(commafy(19999999, {K: true})).toEqual('20,000K')
  expect(commafy(199999999, {K: true})).toEqual('200,000K')
  expect(commafy(1999999999, {K: true})).toEqual('2,000,000K')
  expect(commafy(19999999999, {K: true})).toEqual('20,000,000K')
  expect(commafy(199999999999, {K: true})).toEqual('200,000,000K')
  expect(commafy(1999999999999, {K: true})).toEqual('2,000,000,000K')
  expect(commafy(1955, {K: true})).toEqual('2K')
  expect(commafy(10955, {K: true})).toEqual('11K')
  expect(commafy(100955, {K: true})).toEqual('101K')
  expect(commafy(1000955, {K: true})).toEqual('1,001K')
})

test('thousands', () => {
  // by default with
  expect(commafy(1000)).toEqual('1,000')
  expect(commafy(9999)).toEqual('9,999')
  expect(commafy(1000.0001)).toEqual('1,000.0001')
  
  // set to without
  expect(commafy(1000, { thousandsComma: false })).toEqual('1000')
  expect(commafy(9999, { thousandsComma: false })).toEqual('9999')
  expect(commafy(1000.0001, { thousandsComma: false })).toEqual('1000.0001')

  // multiple options
  expect(commafy(1000.0001, { thousandsComma: true, spacedDecimals: false })).toEqual('1,000.0001')
  expect(commafy(1000.0001, { thousandsComma: true, spacedDecimals: true })).toEqual('1,000.000 1')
  expect(commafy(1000.0001, { thousandsComma: false, spacedDecimals: true })).toEqual('1000.0001')
})

test('defaults - decimals', () => {
  expect(commafy(1)).toEqual('1')
  expect(commafy(1.1)).toEqual('1.1')
  expect(commafy(1.01)).toEqual('1.01')
  expect(commafy(1.001)).toEqual('1.001')
  expect(commafy(1.0001)).toEqual('1.0001')
  expect(commafy(1.00001)).toEqual('1.00001')
  expect(commafy(1.000001)).toEqual('1.000001')
  expect(commafy(1.0000001)).toEqual('1.0000001')
  expect(commafy(1.00000001)).toEqual('1.00000001')
  expect(commafy(1.000000001)).toEqual('1.000000001')
  expect(commafy(1.0000000001)).toEqual('1.0000000001')
  expect(commafy(1.00000000001)).toEqual('1.00000000001')
  expect(commafy(1.000000000001)).toEqual('1.000000000001')
})

test('spaced decimals', () => {
  const options = { spacedDecimals: true }
  expect(commafy(1, options)).toEqual('1')
  expect(commafy(1.1, options)).toEqual('1.1')
  expect(commafy(1.01, options)).toEqual('1.01')
  expect(commafy(1.001, options)).toEqual('1.001')
  expect(commafy(1.0001, options)).toEqual('1.000 1')
  expect(commafy(1.00001, options)).toEqual('1.000 01')
  expect(commafy(1.000001, options)).toEqual('1.000 001')
  expect(commafy(1.0000001, options)).toEqual('1.000 000 1')
  expect(commafy(1.00000001, options)).toEqual('1.000 000 01')
  expect(commafy(1.000000001, options)).toEqual('1.000 000 001')
  expect(commafy(1.0000000001, options)).toEqual('1.000 000 000 1')
  expect(commafy(1.00000000001, options)).toEqual('1.000 000 000 01')
  expect(commafy(1.000000000001, options)).toEqual('1.000 000 000 001')
})

test('strip decimals', () => {
  const options = { stripDecimals: true }
  expect(commafy(1, options)).toEqual('1')
  expect(commafy(1.1, options)).toEqual('1')
  expect(commafy(1.01, options)).toEqual('1')
  expect(commafy(1.001, options)).toEqual('1')
  expect(commafy(1.0001, options)).toEqual('1')
  expect(commafy(1.00001, options)).toEqual('1')
  expect(commafy(1.000001, options)).toEqual('1')
  expect(commafy(1.0000001, options)).toEqual('1')
  expect(commafy(1.00000001, options)).toEqual('1')
  expect(commafy(1.000000001, options)).toEqual('1')
  expect(commafy(1.0000000001, options)).toEqual('1')
  expect(commafy(1.00000000001, options)).toEqual('1')
  expect(commafy(1.000000000001, options)).toEqual('1')
})
